<?xml version="1.0"?>
<analyzerinfo checksum="4163036551">
        <error id="objectIndex" severity="warning" msg="The address of local variable &apos;tmp&apos; might be accessed at non-zero index." verbose="The address of local variable &apos;tmp&apos; might be accessed at non-zero index." cwe="758" hash="13905943610370050855">
            <location file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="101" column="26"/>
            <location file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="101" column="21" info="Address of variable taken here."/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &apos;m_errorMsg&apos; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&apos;t explicitly write them to the initialization list. You could avoid assigning &apos;m_errorMsg&apos; a value by passing the value to the constructor in the initialization list." cwe="398" hash="13283140375078271122">
            <location file0="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLib.h" line="49" column="9"/>
            <symbol>m_errorMsg</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;xBitInt&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;xBitInt&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" hash="3177771660606617752">
            <location file0="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLib.h" line="14" column="5"/>
            <symbol>xBitInt</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;xBitInt&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;xBitInt&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" hash="1685072030356001309">
            <location file0="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLib.h" line="16" column="5"/>
            <symbol>xBitInt</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;ExpectedOverflowException&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;ExpectedOverflowException&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" hash="11747077080564604371">
            <location file0="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLib.h" line="47" column="5"/>
            <symbol>ExpectedOverflowException</symbol>
        </error>
        <error id="oppositeInnerCondition" severity="warning" msg="Opposite inner &apos;if&apos; condition leads to a dead code block." verbose="Opposite inner &apos;if&apos; condition leads to a dead code block (outer condition is &apos;i&gt;=0&apos; and inner condition is &apos;i==(uint64_t)18446744073709551615&apos;)." cwe="398" hash="9409895675602984936">
            <location file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="185" column="14" info="opposite inner condition: i==(uint64_t)18446744073709551615"/>
            <location file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="178" column="41" info="outer condition: i&gt;=0"/>
        </error>
        <error id="unsignedPositive" severity="style" msg="Unsigned expression &apos;i&apos; can&apos;t be negative so it is unnecessary to test it." verbose="Unsigned expression &apos;i&apos; can&apos;t be negative so it is unnecessary to test it." cwe="570" hash="13956574093002068181">
            <location file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="178" column="41" info="Unsigned positive"/>
            <symbol>i</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;prev&apos; is assigned a value that is never used." verbose="Variable &apos;prev&apos; is assigned a value that is never used." cwe="563" hash="760804302942083954">
            <location file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="257" column="19"/>
            <symbol>prev</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;ttmpX_address&apos; is assigned a value that is never used." verbose="Variable &apos;ttmpX_address&apos; is assigned a value that is never used." cwe="563" hash="4293457906938007783">
            <location file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="305" column="29"/>
            <symbol>ttmpX_address</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;tmpX_address&apos; is assigned a value that is never used." verbose="Variable &apos;tmpX_address&apos; is assigned a value that is never used." cwe="563" hash="9734785389962530268">
            <location file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="306" column="28"/>
            <symbol>tmpX_address</symbol>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" hash="3421667456894334783">
            <location file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="244" column="9"/>
        </error>
  <FileInfo check="ctu">
<function-call call-id="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLib.h:36:10" call-funcname="Init < int >" call-argnr="1" file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="12" col="9" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLib.h:14:5" call-funcname="xBitInt" call-argnr="1" file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="183" col="29" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLib.h:37:10" call-funcname="BufferWrite" call-argnr="1" file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="46" col="20" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/>  </FileInfo>
  <FileInfo check="ctu">
<function-call call-id="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLib.h:36:10" call-funcname="Init < int >" call-argnr="1" file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="12" col="9" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLib.h:14:5" call-funcname="xBitInt" call-argnr="1" file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="183" col="29" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLib.h:37:10" call-funcname="BufferWrite" call-argnr="1" file="/home/anzo/Storage/Drive2/Projects/XbitLib/xbitLibMain.cpp" line="46" col="20" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/>  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="BufferWrite" lineNumber="51"/>
    <functiondecl functionName="m_Resize" lineNumber="64"/>
    <functiondecl functionName="ToString" lineNumber="88"/>
    <functiondecl functionName="GetDebugInfo" lineNumber="111"/>
    <functiondecl functionName="Init &lt; int &gt;" lineNumber="40"/>
    <functiondecl functionName="BufferWrite" lineNumber="51"/>
    <functiondecl functionName="m_Resize" lineNumber="64"/>
    <functiondecl functionName="ToString" lineNumber="88"/>
    <functiondecl functionName="GetDebugInfo" lineNumber="111"/>
    <functiondecl functionName="Init &lt; int &gt;" lineNumber="40"/>
    <functioncall functionName="BufferWrite"/>
    <functioncall functionName="ExpectedOverflowException"/>
    <functioncall functionName="Init"/>
    <functioncall functionName="Init &lt; int &gt;"/>
    <functioncall functionName="ToString"/>
    <functioncall functionName="break"/>
    <functioncall functionName="c"/>
    <functioncall functionName="c_str"/>
    <functioncall functionName="carry"/>
    <functioncall functionName="change"/>
    <functioncall functionName="errorMsg"/>
    <functioncall functionName="for"/>
    <functioncall functionName="i"/>
    <functioncall functionName="if"/>
    <functioncall functionName="index"/>
    <functioncall functionName="initialValue"/>
    <functioncall functionName="int"/>
    <functioncall functionName="int64_t"/>
    <functioncall functionName="leftBit"/>
    <functioncall functionName="long"/>
    <functioncall functionName="m_Resize"/>
    <functioncall functionName="m_cpuSize"/>
    <functioncall functionName="m_length"/>
    <functioncall functionName="mulX"/>
    <functioncall functionName="noexcept"/>
    <functioncall functionName="offset"/>
    <functioncall functionName="return"/>
    <functioncall functionName="size"/>
    <functioncall functionName="sizeof"/>
    <functioncall functionName="sqrt"/>
    <functioncall functionName="static_cast"/>
    <functioncall functionName="string"/>
    <functioncall functionName="sub"/>
    <functioncall functionName="t"/>
    <functioncall functionName="tmp"/>
    <functioncall functionName="tmpB"/>
    <functioncall functionName="tmpX"/>
    <functioncall functionName="to_string"/>
    <functioncall functionName="true"/>
    <functioncall functionName="ttmpX"/>
    <functioncall functionName="u"/>
    <functioncall functionName="uint"/>
    <functioncall functionName="uint64_t"/>
    <functioncall functionName="while"/>
    <functioncall functionName="xBit"/>
    <functioncall functionName="xBitInt"/>
    <functioncall functionName="xBitX"/>
  </FileInfo>
</analyzerinfo>
